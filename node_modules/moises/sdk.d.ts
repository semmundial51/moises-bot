declare type Status = "QUEUED" | "STARTED" | "SUCCEEDED" | "FAILED"

declare interface Job {
  id: string
  app: string
  workflow: string
  name: string
  status: Status
  workflowParams: { inputUrl: string } & Record<string, string>
  result: Record<string, string>
  createdAt: string
  startedAt: string
  completedAt: string | null
}

/**
 * Moises SDK.
 */
declare class Moises {
  constructor(options: {
    apiKey: string
    jobMonitor?: number
    saveOutputToFolder?: boolean
    apiEndpoint?: string
  })

  /**
   * Uploads a file.
   * @param fileLocation File location.
   * @returns Download URL.
   */
  uploadFile(fileLocation: string): Promise<string>

  /**
   * Downloads a file.
   * @param url File URL.
   * @param fileDestination Download destination.
   */
  downloadFile(url: string, fileDestination: string): Promise<void>

  /**
   * Adds a new job and monitor its status till completion. At the end, the job
   * is deleted.
   * @param workflow Workflow name.
   * @param origin File to process.
   * @param outputFolder Folder to save the output files.
   */
  processFile(
    workflow: string,
    origin: string,
    outputFolder: string
  ): Promise<void>

  /**
   * Adds a new job for each file in the given input folder and waits for total
   * completion. The results are distributed in folders with the name of the
   * input files. At the end, all jobs are deleted.
   * @param workflow Workflow name.
   * @param inputFolder Folder with files to process.
   * @param outputFolder Folder to save the output files.
   * @param options.concurrency Number of concurrent files to process.
   */
  processFolder(
    workflow: string,
    inputFolder: string,
    outputFolder: string,
    options: { concurrency?: number }
  ): Promise<"Ended normally" | "Aborted">

  /**
   * Adds a new job.
   * @param name Job name.
   * @param workflow Workflow name.
   * @param params Parameters for the workflow.
   * @returns Job ID.
   */
  addJob(
    name: string,
    workflow: string,
    params: Record<string, unknown>
  ): Promise<string>

  /**
   * Returns the job information.
   * @param id Job ID.
   * @returns Job.
   */
  getJob(id: string): Promise<Job>

  /**
   * Waits for the job to complete and returns its information.
   * @param id Job ID.
   * @returns Job.
   */
  waitForJobCompletion(id: string): Promise<Job>

  /**
   * Downloads the job results.
   * @param jobIdOrJobData Job ID or Job information.
   * @param outputFolder Folder to save the downloaded files.
   */
  downloadJobResults(
    jobIdOrJobData: string | Job,
    outputFolder: string
  ): Promise<string[]>

  /**
   * Returns all jobs.
   * @param filters Optional filters for status and workflow.
   */
  listJobs(filters?: { status?: Status[]; workflow?: string[] }): Promise<Job[]>

  /**
   * Deletes a job.
   * @param id Job ID.
   */
  deleteJob(id: string): Promise<void>
}

export default Moises

export { Job, Status }
