#!/usr/bin/env node

import { program } from 'commander'
import fs from "fs/promises"
import { MoisesSdkError } from './lib/moises-sdk-error.js'
import Moises from "./sdk.js"

const config = {
  apiKey: process.env.MOISES_DEVELOPER_APIKEY,
  apiEndpoint: process.env.MOISES_DEVELOPER_HOST
}
const moises = new Moises(config)

program.configureOutput({
  outputError: (str, write) => write(`\x1b[31m${str}\x1b[0m`)
});

program.hook('preAction', () => {
  if (!config.apiKey) {
    fail('Missing API key')
  }
})

const cmdProcess = program.command('process')
const cmdJob = program.command('job')

function fail(error) {
  if (error instanceof MoisesSdkError) {
    return fail(error.message)
  }

  program.error(error.stack || error)
}

cmdProcess
  .command('file')
  .description('Process local file')
  .argument('<workflow>', 'Workflow')
  .argument('<fileLocation>', 'Origin file')
  .argument('<outputFolder>', 'Destination folder', )
  .action(async (workflow, fileLocation, outputFolder) => {
    try {
      const originStat = await fs.lstat(fileLocation)

      if (originStat.isDirectory()) {
        fail("File location is a directory. Use 'folder' command instead.")
        return
      }

      await moises.processFile(workflow, fileLocation, outputFolder)
    } catch (error) {
      fail(error)
    }
  })

cmdProcess
  .command('folder')
  .description('Process local folder')
  .argument('<workflow>', 'Workflow')
  .argument('<inputFolder>', 'Origin folder')
  .argument('<outputFolder>', 'Destination folder')
  .option('--watch', 'Keep watching folder for new files')
  .action(async (workflow, inputFolder, outputFolder, options) => {
    try {
      const originStat = await fs.lstat(inputFolder)
      
      if (!originStat.isDirectory()) {
        fail("Input folder is a file. Use 'file' command instead.")
        return
      }

      if (options.watch) {
        console.log(`Watching ${inputFolder} for new files...`);
      } else {
        console.log(`Processing all ${inputFolder} files...`);
      }

      const controller = new AbortController();

      await moises.processFolder(workflow, inputFolder, outputFolder, {
        signal: controller.signal,
        watch: options.watch,
        concurrency: 3,
        onProgress: (file, status, { pending, processing, succeeded, failed }) => {
          console.log(`[${status.toUpperCase()}] ${file}`);
          // console.log({ pending, processing, succeeded, failed })
        }
      })
    } catch (error) {
      fail(error)
    }
  })

cmdJob
  .command('add')
  .description('Add new job')
  .argument('<name>', 'Job name')
  .argument('<workflow>', 'Workflow')
  .argument('<inputFile>', 'Input file')
  .action(async (name, workflow, inputFile) => {
    try {
      const inputUrl = await moises.uploadFile(inputFile)
      const result = await moises.addJob(name, workflow, { inputUrl })
      console.log(result);
    } catch (error) {
      fail(error)
    }
  })

cmdJob
  .command('delete')
  .description('Delete job')
  .argument('<jobId>', 'Job to delete (use "all" to delete all jobs)')
  .action(async (jobId) => {
    try {
      let jobs
  
      if (jobId === 'all') {
        jobs = await moises.listJobs()
        console.log(`Found ${jobs.length} jobs`);
      } else {
        jobs = [await moises.getJob(jobId)]
      }
  
      for (const job of jobs) {
        console.log(`Deleting [${job.id}] ${job.name}...`);
        await moises.deleteJob(job.id)
      }
    } catch (error) {
      fail(error)
    }
  });

cmdJob
  .command('info')
  .argument('<jobId>', 'Get information about a job')
  .action(async (jobId) => {
    try {
      const jobs = await moises.getJob(jobId)
      console.log(jobs)
    } catch (error) {
      fail(error)
    }
  });

cmdJob
  .command('list')
  .action(async () => {
    try {
      const data = await moises.listJobs()
      console.log(data);
    } catch (error) {
      fail(error)
    }
  });

program.parse();
